#!/usr/bin/env bash

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "$shome/script/profile"
  source normalize

  local nm_role

  case "$#" in
    0)
      nm_role="administrator"
      ;;
    1)
      CONTEXT_ORG="$1"
      nm_role="administrator"
      shift
      ;;
    *)
      CONTEXT_ORG="$1"; shift
      nm_role="$1"; shift
      ;;
  esac


  local pth_assume=
  for pth_assume in "$HOME/.aws/assume" "/config/aws/assume"; do
    if [[ -f "$pth_assume" ]]; then
      local id_mfa="$(cat "$pth_assume" | jq -r --arg org "$CONTEXT_ORG" '.[$org].mfa')"
      local nm_region="$(cat "$pth_assume" | jq -r --arg org "$CONTEXT_ORG" '.[$org].region')"
      local arn_role="$(cat "$pth_assume" | jq -r --arg org "$CONTEXT_ORG" --arg role "$nm_role" '.[$org][$role]//""')"
      break
    fi
  done

  local arn_role="${arn_role:-"$(aws iam list-roles | jq -r --arg role "$nm_role" '.Roles | map(select(.RoleName == $role)) | map(.Arn)[]')"}"

  if [[ -z "${id_mfa:-}" ]]; then
    echo "ERROR: could not find the mfa device for $CONTEXT_ORG" 1>&2
    return 1
  fi

  local nm_key="${id_mfa##*/}"

  local tmp_credentials="$(mktemp -t XXXXXX)"
  local tmp_sts="$(mktemp -t XXXXXX)"
  trap "$(printf 'rm -f "%q" "%q" 1>&2' "$tmp_credentials" "$tmp_sts")" EXIT

  if [[ "${nm_role}" != "administrator" ]]; then
    aws sts assume-role --role-arn "$arn_role" --role-session-name "${CONTEXT_ORG}-$LOGNAME" > "$tmp_sts"
  else
    vault read --format json "secret/${nm_key}/credentials" | jq -r '.data.aws' > "$tmp_credentials"
    if [[ ! -s "$tmp_credentials" ]]; then
      vault write "secret/${nm_key}/credentials" aws="$(gpg2 --decrypt "${BOARD_PATH}/.aws/credentials-${nm_key}.gpg")" >/dev/null
      vault read --format json "secret/${nm_key}/credentials" | jq -r '.data.aws' > "$tmp_credentials"
    fi
    export AWS_SHARED_CREDENTIALS_FILE="$tmp_credentials"
    unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SESSION_EXPIRATION
    
    local the_code=
    local last_code=

    while true; do
      while [[ "$the_code" == "$last_code" ]]; do
        the_code="$(imma totp "${nm_key}")"
        sleep 1
      done
      last_code="$the_code"
      if aws sts assume-role --role-arn "$arn_role" --role-session-name "${CONTEXT_ORG}-$LOGNAME" --serial-number "$id_mfa" --token-code "$the_code" > "$tmp_sts"; then
        break
      fi
    done

    unset AWS_SHARED_CREDENTIALS_FILE
  fi

  if [[ "$#" -gt 0 ]]; then
    export "AWS_ACCESS_KEY_ID"="$(cat "$tmp_sts" | jq -r '.Credentials.AccessKeyId')"
    export "AWS_SECRET_ACCESS_KEY"="$(cat "$tmp_sts" | jq -r '.Credentials.SecretAccessKey')"
    export "AWS_SESSION_TOKEN"="$(cat "$tmp_sts" | jq -r '.Credentials.SessionToken')"
    export "AWS_SESSION_EXPIRATION"="$(cat "$tmp_sts" | jq -r '.Credentials.Expiration')"
    exec "$@"
  else
    export "${CONTEXT_ORG}_AWS_ACCESS_KEY_ID"="$(cat "$tmp_sts" | jq -r '.Credentials.AccessKeyId')"
    export "${CONTEXT_ORG}_AWS_SECRET_ACCESS_KEY"="$(cat "$tmp_sts" | jq -r '.Credentials.SecretAccessKey')"
    export "${CONTEXT_ORG}_AWS_SESSION_TOKEN"="$(cat "$tmp_sts" | jq -r '.Credentials.SessionToken')"
    export "${CONTEXT_ORG}_AWS_SESSION_EXPIRATION"="$(cat "$tmp_sts" | jq -r '.Credentials.Expiration')"

    set | egrep '^'"${CONTEXT_ORG}" | sed 's#^#export #'
    echo export CONTEXT_ORG="${CONTEXT_ORG}"
    echo export AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION:-$nm_region}"
  fi
}

source sub "$BASH_SOURCE" "$@"
