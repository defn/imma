#!/usr/bin/env bash

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "$shome/script/profile"
  source normalize

  if [[ -z "${1:-}" ]]; then
    set -- administrator
  fi
  local nm_role="$1"; shift

  if [[ -n "${1:-}" ]]; then
    export AWS_DEFAULT_REGION="$1"; shift
  fi

  local nm_prefix="${CONTEXT_ORG}_${nm_role#${CONTEXT_ORG}-}"

  local pth_assume=
  for pth_assume in "$HOME/.aws/assume" "/config/aws/assume"; do
    if [[ -f "$pth_assume" ]]; then
      local arn_role="$(cat "$pth_assume" | jq -r --arg role "$nm_prefix" '.[$role].role')"
      local id_mfa="$(cat "$pth_assume" | jq -r --arg role "$nm_prefix" '.[$role].mfa')"
      local nm_region="$(cat "$pth_assume" | jq -r --arg role "$nm_prefix" '.[$role].region')"
      break
    fi
  done

  if [[ -z "${id_mfa:-}" ]]; then
    echo "ERROR: could not find the mfa device for $nm_prefix" 1>&2
    return 1
  fi

  local nm_key="${id_mfa##*/}"

  local tmp_credentials="$(mktemp -t XXXXXX)"
  local tmp_sts="$(mktemp -t XXXXXX)"
  trap "$(printf 'rm -vf "%q" "%q" 1>&2' "$tmp_credentials" "$tmp_sts")" EXIT

  vault read --format json "secret/${nm_key}/credentials"
  vault read --format json "secret/${nm_key}/credentials" | jq -r '.data.aws' > "$tmp_credentials"
  if [[ ! -s "$tmp_credentials" ]]; then
    vault write "secret/${nm_key}/credentials" aws="$(gpg2 --decrypt "${BOARD_PATH}/.aws/credentials-${nm_key}.gpg")"
    vault read --format json "secret/${nm_key}/credentials" | jq -r '.data.aws' > "$tmp_credentials"
  fi
  export AWS_SHARED_CREDENTIALS_FILE="$tmp_credentials"

  unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SESSION_EXPIRATION
  
  if type -P "env-${CONTEXT_ORG}" >/dev/null; then
    source "env-${CONTEXT_ORG}"
  fi

  local the_code=
  local last_code=

  while true; do
    while [[ "$the_code" == "$last_code" ]]; do
      the_code="$(imma totp "${nm_key}")"
      sleep 1
    done
    last_code="$the_code"
    if aws sts assume-role --role-arn "$arn_role" --role-session-name "${CONTEXT_ORG}-$LOGNAME" --serial-number "$id_mfa" --token-code "$the_code" > "$tmp_sts"; then
      break
    fi
  done

  unset AWS_SHARED_CREDENTIALS_FILE

  export "${CONTEXT_ORG}_AWS_ACCESS_KEY_ID"="$(cat "$tmp_sts" | jq -r '.Credentials.AccessKeyId')"
  export "${CONTEXT_ORG}_AWS_SECRET_ACCESS_KEY"="$(cat "$tmp_sts" | jq -r '.Credentials.SecretAccessKey')"
  export "${CONTEXT_ORG}_AWS_SESSION_TOKEN"="$(cat "$tmp_sts" | jq -r '.Credentials.SessionToken')"
  export "${CONTEXT_ORG}_AWS_SESSION_EXPIRATION"="$(cat "$tmp_sts" | jq -r '.Credentials.Expiration')"

  unset AWS_PROFILE

  set | egrep '^'"${CONTEXT_ORG}" | sed 's#^#export #'
  echo export CONTEXT_ORG="${CONTEXT_ORG}"
  echo export AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION:-$nm_region}"
}

source sub "$BASH_SOURCE" "$@"
